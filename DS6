--1.	Bully Algorithm 

import java.util.Scanner;

class Process {
    public int id;
    public String status;

    public Process(int id) {
        this.id = id;
        this.status = "active";
    }
}

public class BullyAlgo {

    Scanner sc;
    Process[] processes;
    int n;

    // Initialize processes
    public void ring() {
        sc = new Scanner(System.in);

        System.out.println("Enter Number of Processes");
        n = sc.nextInt();

        processes = new Process[n];
        for (int i = 0; i < n; i++) {
            processes[i] = new Process(i);
        }
    }

    // Perform the Bully Election Algorithm
    public void performElection() {
        int max_id = getMax();

        System.out.println("Process having highest Process Id " + max_id + " fails ");
        processes[max_id].status = "inactive";
        int initiator = 0;

        while (true) {
            boolean higher_process = false;

            // Election message passing
            for (int i = initiator + 1; i < n; i++) {
                if (processes[i].status.equals("active")) {
                    System.out.println("Process " + initiator + " passes Election message to process " + i);
                    higher_process = true;
                }
            }

            System.out.println();

            // If there was a higher process, continue passing Ok messages
            if (higher_process) {
                for (int i = initiator + 1; i < n; i++) {
                    if (processes[i].status.equals("active")) {
                        System.out.println("Process " + i + " passes Ok (" + i + ") message to process " + initiator);
                    }
                }
            } else {
                break;
            }

            initiator++;
            System.out.println();

            // Find the coordinator
            int coord = getMax();
            System.out.println("Finally Process " + coord + " becomes Coordinator");
            System.out.println();

            // Passing coordinator message
            for (int i = coord - 1; i >= 0; i--) {
                if (processes[i].status.equals("active")) {
                    System.out.println("Process " + coord + " passes Coordinator (" + coord + ") message to process " + i);
                }
            }

            System.out.println();
            System.out.println("End of Election");

            break;
        }
    }

    // Get the process with the highest ID that is active
    public int getMax() {
        int id = -1;
        int max_pid = -999;

        for (int i = 0; i < processes.length; i++) {
            if (processes[i].status.equals("active") && max_pid < processes[i].id) {
                max_pid = processes[i].id;
                id = i;
            }
        }

        return id;
    }

    // Main method to start the Bully Algorithm
    public static void main(String[] args) {
        BullyAlgo bully = new BullyAlgo();

        bully.ring();
        bully.performElection();
    }
}

---2.Bully Ring Algorithm

import java.util.*;

public class Ring_Bully {

    int max_processes;
    int coordinator;
    boolean processes[];
    ArrayList<Integer> pid;

    // Constructor to initialize the ring
    public Ring_Bully(int max) {
        coordinator = max;
        max_processes = max;
        pid = new ArrayList<Integer>();
        processes = new boolean[max];

        for (int i = 0; i < max; i++) {
            processes[i] = true;
            System.out.println("P" + (i + 1) + " created.");
        }
        System.out.println("P" + (coordinator) + " is the coordinator");
    }

    // Display the status of each process (up or down)
    void displayProcesses() {
        for (int i = 0; i < max_processes; i++) {
            if (processes[i]) {
                System.out.println("P" + (i + 1) + " is up.");
            } else {
                System.out.println("P" + (i + 1) + " is down.");
            }
        }
        System.out.println("P" + (coordinator) + " is the coordinator");
    }

    // Bring a process up
    void upProcess(int process_id) {
        if (!processes[process_id - 1]) {
            processes[process_id - 1] = true;
            System.out.println("Process P" + (process_id) + " is up.");
        } else {
            System.out.println("Process P" + (process_id) + " is already up.");
        }
    }

    // Bring a process down
    void downProcess(int process_id) {
        if (!processes[process_id - 1]) {
            System.out.println("Process P" + (process_id) + " is already down.");
        } else {
            processes[process_id - 1] = false;
            System.out.println("Process P" + (process_id) + " is down.");
        }
    }

    // Display the contents of the ArrayList
    void displayArrayList(ArrayList<Integer> pid) {
        System.out.print("[ ");
        for (Integer x : pid) {
            System.out.print(x + " ");
        }
        System.out.print(" ]\n");
    }

    // Initiate the election process
    void initElection(int process_id) {
        if (processes[process_id - 1]) {
            pid.add(process_id);
            int temp = process_id;
            System.out.print("Process P" + process_id + " sending the following list:- ");
            displayArrayList(pid);

            while (temp < max_processes && temp != process_id - 1) {
                if (processes[temp]) {
                    pid.add(temp + 1);
                    System.out.print("Process P" + (temp + 1) + " sending the following list:- ");
                    displayArrayList(pid);
                }
                temp = (temp + 1) % max_processes;
            }

            coordinator = Collections.max(pid);
            System.out.println("Process P" + process_id + " has declared P" + coordinator + " as the coordinator");
            pid.clear();
        }
    }

    // Main function to run the program
    public static void main(String args[]) {
        Ring_Bully ring = null;
        int max_processes = 0, process_id = 0;
        int choice = 0;
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println();
            System.out.println("Ring Algorithm");
            System.out.println("1. Create processes");
            System.out.println("2. Display processes");
            System.out.println("3. Up a process");
            System.out.println("4. Down a process");
            System.out.println("5. Run election algorithm");
            System.out.println("6. Exit Program");
            System.out.print("Enter your choice:- ");
            choice = sc.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter the total number of processes:- ");
                    System.out.println();
                    max_processes = sc.nextInt();
                    ring = new Ring_Bully(max_processes);
                    break;
                case 2:
                    System.out.println();
                    ring.displayProcesses();
                    break;
                case 3:
                    System.out.print("Enter the process to up:- ");
                    process_id = sc.nextInt();
                    System.out.println();
                    ring.upProcess(process_id);
                    break;
                case 4:
                    System.out.print("Enter the process to down:- ");
                    process_id = sc.nextInt();
                    System.out.println();
                    ring.downProcess(process_id);
                    break;
                case 5:
                    System.out.print("Enter the process which will initiate election:- ");
                    process_id = sc.nextInt();
                    System.out.println();
                    ring.initElection(process_id);
                    break;
                case 6:
                    System.exit(0);
                    break;
                default:
                    System.out.println("Error in choice. Please try again.");
                    break;
            }
        }
    }
}
